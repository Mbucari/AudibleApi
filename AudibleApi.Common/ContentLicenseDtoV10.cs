// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AudibleApi.Common;
//
//    var contentLicenseDtoV10 = ContentLicenseDtoV10.FromJson(jsonString);

namespace AudibleApi.Common
{
    using System;
    using System.Linq;
    using Newtonsoft.Json;

    public partial class ContentLicenseDtoV10
    {
        /// <summary>
        /// If null, check for <see cref="Message"/>
        /// </summary>
        [JsonProperty("content_license", Required = Required.Always)]
        public ContentLicense ContentLicense { get; set; }

        [JsonProperty("response_groups")]
        public string[] ResponseGroups { get; set; }

        /// <summary>
        /// If not null, then <see cref="ContentLicense"/> was not returned by the Api.
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }
    }

    public partial class ContentLicense
    {
        [JsonProperty("access_expiry_date")]
        public DateTimeOffset AccessExpiryDate { get; set; }

        [JsonProperty("acr")]
        public string Acr { get; set; }

        [JsonProperty("asin")]
        public string Asin { get; set; }

        [JsonProperty("content_metadata")]
        public ContentMetadata ContentMetadata { get; set; }

        [JsonProperty("drm_type")]
        public string DrmType { get; set; }

        [JsonProperty("license_id")]
        public Guid LicenseId { get; set; }

        /// <summary>
        /// A base-64 string containing the <see cref="VoucherDtoV10"/> encrypted with the device type, device serial number, amazon accounty ID, and asin.
        /// See https://patchwork.ffmpeg.org/project/ffmpeg/patch/17559601585196510@sas2-2fa759678732.qloud-c.yandex.net/
        /// </summary>
        [JsonProperty("license_response")]
        public string LicenseResponse { get; set; }
        
        public VoucherDtoV10 Voucher { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("pdf_url")]
        public string PdfUrl { get; set; }

        [JsonProperty("refresh_date")]
        public DateTimeOffset RefreshDate { get; set; }

        [JsonProperty("removal_date")]
        public DateTimeOffset RemovalDate { get; set; }

        [JsonProperty("request_id")]
        public string RequestId { get; set; }

        [JsonProperty("requires_ad_supported_playback")]
        public bool RequiresAdSupportedPlayback { get; set; }

        [JsonProperty("status_code")]
        public string StatusCode { get; set; }

        [JsonProperty("voucher_id")]
        public string VoucherId { get; set; }

        [JsonProperty("license_denial_reasons")]
        public LicenseDenialReason[] LicenseDenialReasons { get; set; }
    }

    public partial class ContentMetadata
    {
        [JsonProperty("content_url")]
        public ContentUrl ContentUrl { get; set; }

        [JsonProperty("last_position_heard")]
        public LastPositionHeard LastPositionHeard { get; set; }
    }

    public partial class ContentUrl
    {
        [JsonProperty("offline_url")]
        public string OfflineUrl { get; set; }
    }

    public partial class LastPositionHeard
    {
        [JsonProperty("last_updated")]
        public DateTimeOffset LastUpdated { get; set; }

        [JsonProperty("position_ms")]
        public long PositionMs { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }
    public partial class LicenseDenialReason
    {
        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("rejectionReason")]
        public string RejectionReason { get; set; }

        [JsonProperty("validationType")]
        public string ValidationType { get; set; }
    }

    public partial class ContentLicenseDtoV10
    {
        public static ContentLicenseDtoV10 FromJson(Newtonsoft.Json.Linq.JObject json, string deviceType, string deviceSerialNumber, string amazonAccountId)
        {
            var license = json.ToObject<ContentLicenseDtoV10>();

            if (license.ContentLicense?.LicenseResponse is not null)
                license.ContentLicense.Voucher = DecryptLicenseResponse(license, deviceType, deviceSerialNumber, amazonAccountId);

            return license;
        }

        private static VoucherDtoV10 DecryptLicenseResponse(ContentLicenseDtoV10 contentLicense, string deviceType, string deviceSerialNumber, string amazonAccountId)
        {
            //AAXC scheme described in:
            //https://patchwork.ffmpeg.org/project/ffmpeg/patch/17559601585196510@sas2-2fa759678732.qloud-c.yandex.net/

            byte[] keyComponents = System.Text.Encoding.ASCII.GetBytes(
                deviceType +
                deviceSerialNumber +
                amazonAccountId +
                contentLicense.ContentLicense.Asin
                );

            byte[] key = new byte[16];
            byte[] iv = new byte[16];

            using var sha256 = System.Security.Cryptography.SHA256.Create();
            sha256.ComputeHash(keyComponents);
            Array.Copy(sha256.Hash, 0, key, 0, 16);
            Array.Copy(sha256.Hash, 16, iv, 0, 16);

            var cipherText = Convert.FromBase64String(contentLicense.ContentLicense.LicenseResponse);

            string plainText;

            using var aes = System.Security.Cryptography.Aes.Create();
            aes.Mode = System.Security.Cryptography.CipherMode.CBC;
            aes.Padding = System.Security.Cryptography.PaddingMode.None;

            using var decryptor = aes.CreateDecryptor(key, iv);

            using var csDecrypt = new System.Security.Cryptography.CryptoStream(new System.IO.MemoryStream(cipherText), decryptor, System.Security.Cryptography.CryptoStreamMode.Read);

            csDecrypt.Read(cipherText, 0, cipherText.Length & 0x7ffffff0);

            plainText = System.Text.Encoding.ASCII.GetString(cipherText.TakeWhile(b => b != 0).ToArray());

            return VoucherDtoV10.FromJson(plainText);
        }
    }  
}
